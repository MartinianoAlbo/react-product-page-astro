---
import type { ProductImage } from '@/lib/api';

export interface Props {
  images: ProductImage[];
  productName: string;
}

const { images, productName } = Astro.props;

// Asegurar que siempre haya al menos una imagen
const galleryImages = images.length > 0 ? images : [{
  id: 0,
  src: '/placeholder.jpg',
  thumbnail: '/placeholder-thumb.jpg',
  alt: productName,
  title: productName,
  is_main: true
}];

const mainImage = galleryImages.find(img => img.is_main) || galleryImages[0];
---

<div class="rpp-gallery" data-gallery>
  <!-- Imagen principal -->
  <div class="rpp-relative rpp-mb-4 rpp-bg-gray-100 rpp-rounded-lg rpp-overflow-hidden">
    <img
      id="main-image"
      src={mainImage.src}
      alt={mainImage.alt || productName}
      class="rpp-w-full rpp-h-auto rpp-object-contain"
      loading="eager"
      data-zoom-image={mainImage.src}
    />
    
    <!-- Badge de oferta si aplica -->
    <slot name="sale-badge" />
  </div>

  <!-- Thumbnails -->
  {galleryImages.length > 1 && (
    <div class="rpp-grid rpp-grid-cols-4 sm:rpp-grid-cols-5 rpp-gap-2">
      {galleryImages.map((image, index) => (
        <button
          type="button"
          class={`rpp-thumbnail rpp-relative rpp-bg-gray-100 rpp-rounded rpp-overflow-hidden rpp-border-2 rpp-transition-all hover:rpp-border-gray-400 ${
            index === 0 ? 'rpp-border-gray-900' : 'rpp-border-transparent'
          }`}
          data-image-src={image.src}
          data-image-alt={image.alt || productName}
          data-image-index={index}
        >
          <img
            src={image.thumbnail}
            alt={`${productName} - Vista ${index + 1}`}
            class="rpp-w-full rpp-h-full rpp-object-cover"
            loading="lazy"
          />
        </button>
      ))}
    </div>
  )}
</div>

<style>
  .rpp-gallery {
    position: sticky;
    top: 2rem;
  }
  
  .rpp-thumbnail {
    aspect-ratio: 1;
    cursor: pointer;
  }
  
  .rpp-thumbnail img {
    transition: transform 0.2s;
  }
  
  .rpp-thumbnail:hover img {
    transform: scale(1.05);
  }
  
  #main-image {
    max-height: 600px;
    cursor: zoom-in;
  }
</style>

<script>
  // Gallery functionality
  document.addEventListener('DOMContentLoaded', () => {
    const gallery = document.querySelector('[data-gallery]');
    if (!gallery) return;

    const mainImage = gallery.querySelector('#main-image') as HTMLImageElement;
    const thumbnails = gallery.querySelectorAll('.rpp-thumbnail');

    // Cambiar imagen principal al hacer clic en thumbnail
    thumbnails.forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        const newSrc = thumb.getAttribute('data-image-src');
        const newAlt = thumb.getAttribute('data-image-alt');
        
        if (mainImage && newSrc) {
          mainImage.src = newSrc;
          mainImage.alt = newAlt || '';
          mainImage.setAttribute('data-zoom-image', newSrc);
          
          // Actualizar estado activo
          thumbnails.forEach(t => t.classList.remove('rpp-border-gray-900'));
          thumbnails.forEach(t => t.classList.add('rpp-border-transparent'));
          thumb.classList.remove('rpp-border-transparent');
          thumb.classList.add('rpp-border-gray-900');
        }
      });
    });

    // Simple zoom on hover (opcional)
    let zoomActive = false;
    
    mainImage?.addEventListener('mouseenter', () => {
      mainImage.style.cursor = 'zoom-in';
    });

    mainImage?.addEventListener('click', () => {
      if (!zoomActive) {
        // Aquí podrías implementar un modal o zoom
        console.log('Zoom functionality - implement modal here');
      }
    });
  });
</script>